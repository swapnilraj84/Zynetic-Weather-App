"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _express = require("express");
var _constants = require("../../../lib/constants");
var _search = _interopRequireDefault(require("../../../lib/search"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function addSearchWebApi(storage, auth) {
  const route = (0, _express.Router)(); /* eslint new-cap: 0 */
  // Search package
  route.get('/search/:anything', function (req, res, next) {
    const results = _search.default.query(req.params.anything);
    // FUTURE: figure out here the correct type
    const packages = [];
    const getPackageInfo = function (i) {
      storage.getPackage({
        name: results[i].ref,
        uplinksLook: false,
        callback: (err, entry) => {
          if (!err && entry) {
            auth.allow_access({
              packageName: entry.name
            }, req.remote_user, function (err, allowed) {
              if (err || !allowed) {
                return;
              }
              packages.push(entry.versions[entry[_constants.DIST_TAGS].latest]);
            });
          }
          if (i >= results.length - 1) {
            next(packages);
          } else {
            getPackageInfo(i + 1);
          }
        }
      });
    };
    if (results.length) {
      getPackageInfo(0);
    } else {
      next([]);
    }
  });
  return route;
}
var _default = addSearchWebApi;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhZGRTZWFyY2hXZWJBcGkiLCJzdG9yYWdlIiwiYXV0aCIsInJvdXRlIiwiUm91dGVyIiwiZ2V0IiwicmVxIiwicmVzIiwibmV4dCIsInJlc3VsdHMiLCJTZWFyY2giLCJxdWVyeSIsInBhcmFtcyIsImFueXRoaW5nIiwicGFja2FnZXMiLCJnZXRQYWNrYWdlSW5mbyIsImkiLCJnZXRQYWNrYWdlIiwibmFtZSIsInJlZiIsInVwbGlua3NMb29rIiwiY2FsbGJhY2siLCJlcnIiLCJlbnRyeSIsImFsbG93X2FjY2VzcyIsInBhY2thZ2VOYW1lIiwicmVtb3RlX3VzZXIiLCJhbGxvd2VkIiwicHVzaCIsInZlcnNpb25zIiwiRElTVF9UQUdTIiwibGF0ZXN0IiwibGVuZ3RoIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwaS93ZWIvYXBpL3NlYXJjaC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdleHByZXNzJztcblxuaW1wb3J0IHsgUGFja2FnZSB9IGZyb20gJ0B2ZXJkYWNjaW8vdHlwZXMnO1xuXG5pbXBvcnQgeyBESVNUX1RBR1MgfSBmcm9tICcuLi8uLi8uLi9saWIvY29uc3RhbnRzJztcbmltcG9ydCBTZWFyY2ggZnJvbSAnLi4vLi4vLi4vbGliL3NlYXJjaCc7XG5pbXBvcnQge1xuICAkTmV4dEZ1bmN0aW9uVmVyLFxuICAkUmVxdWVzdEV4dGVuZCxcbiAgJFJlc3BvbnNlRXh0ZW5kLFxuICBJQXV0aCxcbiAgSVN0b3JhZ2VIYW5kbGVyLFxufSBmcm9tICcuLi8uLi8uLi90eXBlcyc7XG5cbmZ1bmN0aW9uIGFkZFNlYXJjaFdlYkFwaShzdG9yYWdlOiBJU3RvcmFnZUhhbmRsZXIsIGF1dGg6IElBdXRoKTogUm91dGVyIHtcbiAgY29uc3Qgcm91dGUgPSBSb3V0ZXIoKTsgLyogZXNsaW50IG5ldy1jYXA6IDAgKi9cbiAgLy8gU2VhcmNoIHBhY2thZ2VcbiAgcm91dGUuZ2V0KFxuICAgICcvc2VhcmNoLzphbnl0aGluZycsXG4gICAgZnVuY3Rpb24gKHJlcTogJFJlcXVlc3RFeHRlbmQsIHJlczogJFJlc3BvbnNlRXh0ZW5kLCBuZXh0OiAkTmV4dEZ1bmN0aW9uVmVyKTogdm9pZCB7XG4gICAgICBjb25zdCByZXN1bHRzOiBhbnkgPSBTZWFyY2gucXVlcnkocmVxLnBhcmFtcy5hbnl0aGluZyk7XG4gICAgICAvLyBGVVRVUkU6IGZpZ3VyZSBvdXQgaGVyZSB0aGUgY29ycmVjdCB0eXBlXG4gICAgICBjb25zdCBwYWNrYWdlczogYW55W10gPSBbXTtcblxuICAgICAgY29uc3QgZ2V0UGFja2FnZUluZm8gPSBmdW5jdGlvbiAoaSk6IHZvaWQge1xuICAgICAgICBzdG9yYWdlLmdldFBhY2thZ2Uoe1xuICAgICAgICAgIG5hbWU6IHJlc3VsdHNbaV0ucmVmLFxuICAgICAgICAgIHVwbGlua3NMb29rOiBmYWxzZSxcbiAgICAgICAgICBjYWxsYmFjazogKGVyciwgZW50cnk6IFBhY2thZ2UpOiB2b2lkID0+IHtcbiAgICAgICAgICAgIGlmICghZXJyICYmIGVudHJ5KSB7XG4gICAgICAgICAgICAgIGF1dGguYWxsb3dfYWNjZXNzKFxuICAgICAgICAgICAgICAgIHsgcGFja2FnZU5hbWU6IGVudHJ5Lm5hbWUgfSxcbiAgICAgICAgICAgICAgICByZXEucmVtb3RlX3VzZXIsXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKGVyciwgYWxsb3dlZCk6IHZvaWQge1xuICAgICAgICAgICAgICAgICAgaWYgKGVyciB8fCAhYWxsb3dlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIHBhY2thZ2VzLnB1c2goZW50cnkudmVyc2lvbnNbZW50cnlbRElTVF9UQUdTXS5sYXRlc3RdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChpID49IHJlc3VsdHMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICBuZXh0KHBhY2thZ2VzKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGdldFBhY2thZ2VJbmZvKGkgKyAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgIH07XG5cbiAgICAgIGlmIChyZXN1bHRzLmxlbmd0aCkge1xuICAgICAgICBnZXRQYWNrYWdlSW5mbygwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHQoW10pO1xuICAgICAgfVxuICAgIH1cbiAgKTtcblxuICByZXR1cm4gcm91dGU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFkZFNlYXJjaFdlYkFwaTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFJQTtBQUNBO0FBQXlDO0FBU3pDLFNBQVNBLGVBQWUsQ0FBQ0MsT0FBd0IsRUFBRUMsSUFBVyxFQUFVO0VBQ3RFLE1BQU1DLEtBQUssR0FBRyxJQUFBQyxlQUFNLEdBQUUsQ0FBQyxDQUFDO0VBQ3hCO0VBQ0FELEtBQUssQ0FBQ0UsR0FBRyxDQUNQLG1CQUFtQixFQUNuQixVQUFVQyxHQUFtQixFQUFFQyxHQUFvQixFQUFFQyxJQUFzQixFQUFRO0lBQ2pGLE1BQU1DLE9BQVksR0FBR0MsZUFBTSxDQUFDQyxLQUFLLENBQUNMLEdBQUcsQ0FBQ00sTUFBTSxDQUFDQyxRQUFRLENBQUM7SUFDdEQ7SUFDQSxNQUFNQyxRQUFlLEdBQUcsRUFBRTtJQUUxQixNQUFNQyxjQUFjLEdBQUcsVUFBVUMsQ0FBQyxFQUFRO01BQ3hDZixPQUFPLENBQUNnQixVQUFVLENBQUM7UUFDakJDLElBQUksRUFBRVQsT0FBTyxDQUFDTyxDQUFDLENBQUMsQ0FBQ0csR0FBRztRQUNwQkMsV0FBVyxFQUFFLEtBQUs7UUFDbEJDLFFBQVEsRUFBRSxDQUFDQyxHQUFHLEVBQUVDLEtBQWMsS0FBVztVQUN2QyxJQUFJLENBQUNELEdBQUcsSUFBSUMsS0FBSyxFQUFFO1lBQ2pCckIsSUFBSSxDQUFDc0IsWUFBWSxDQUNmO2NBQUVDLFdBQVcsRUFBRUYsS0FBSyxDQUFDTDtZQUFLLENBQUMsRUFDM0JaLEdBQUcsQ0FBQ29CLFdBQVcsRUFDZixVQUFVSixHQUFHLEVBQUVLLE9BQU8sRUFBUTtjQUM1QixJQUFJTCxHQUFHLElBQUksQ0FBQ0ssT0FBTyxFQUFFO2dCQUNuQjtjQUNGO2NBRUFiLFFBQVEsQ0FBQ2MsSUFBSSxDQUFDTCxLQUFLLENBQUNNLFFBQVEsQ0FBQ04sS0FBSyxDQUFDTyxvQkFBUyxDQUFDLENBQUNDLE1BQU0sQ0FBQyxDQUFDO1lBQ3hELENBQUMsQ0FDRjtVQUNIO1VBRUEsSUFBSWYsQ0FBQyxJQUFJUCxPQUFPLENBQUN1QixNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQzNCeEIsSUFBSSxDQUFDTSxRQUFRLENBQUM7VUFDaEIsQ0FBQyxNQUFNO1lBQ0xDLGNBQWMsQ0FBQ0MsQ0FBQyxHQUFHLENBQUMsQ0FBQztVQUN2QjtRQUNGO01BQ0YsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUVELElBQUlQLE9BQU8sQ0FBQ3VCLE1BQU0sRUFBRTtNQUNsQmpCLGNBQWMsQ0FBQyxDQUFDLENBQUM7SUFDbkIsQ0FBQyxNQUFNO01BQ0xQLElBQUksQ0FBQyxFQUFFLENBQUM7SUFDVjtFQUNGLENBQUMsQ0FDRjtFQUVELE9BQU9MLEtBQUs7QUFDZDtBQUFDLGVBRWNILGVBQWU7QUFBQSJ9